/*
 * This file is generated by jOOQ.
 */
package fr.elercia.redcloud.dao.generated;


import fr.elercia.redcloud.dao.generated.tables.Directory;
import fr.elercia.redcloud.dao.generated.tables.User;
import fr.elercia.redcloud.dao.generated.tables.UserPrivilege;
import fr.elercia.redcloud.dao.generated.tables.records.DirectoryRecord;
import fr.elercia.redcloud.dao.generated.tables.records.UserPrivilegeRecord;
import fr.elercia.redcloud.dao.generated.tables.records.UserRecord;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import javax.annotation.Generated;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>redcloud</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<DirectoryRecord, Integer> IDENTITY_DIRECTORY = Identities0.IDENTITY_DIRECTORY;
    public static final Identity<UserRecord, Integer> IDENTITY_USER = Identities0.IDENTITY_USER;
    public static final Identity<UserPrivilegeRecord, Integer> IDENTITY_USER_PRIVILEGE = Identities0.IDENTITY_USER_PRIVILEGE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_PRIMARY = UniqueKeys0.KEY_DIRECTORY_PRIMARY;
    public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_DIRECTORY_ID_UINDEX = UniqueKeys0.KEY_DIRECTORY_DIRECTORY_ID_UINDEX;
    public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_DIRECTORY_RESOURCES_ID_UINDEX = UniqueKeys0.KEY_DIRECTORY_DIRECTORY_RESOURCES_ID_UINDEX;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_USER_ID_UINDEX = UniqueKeys0.KEY_USER_USER_ID_UINDEX;
    public static final UniqueKey<UserRecord> KEY_USER_USER_RESOURCE_ID_UINDEX = UniqueKeys0.KEY_USER_USER_RESOURCE_ID_UINDEX;
    public static final UniqueKey<UserPrivilegeRecord> KEY_USER_PRIVILEGE_PRIMARY = UniqueKeys0.KEY_USER_PRIVILEGE_PRIMARY;
    public static final UniqueKey<UserPrivilegeRecord> KEY_USER_PRIVILEGE_PRIVILEGE_ID_UINDEX = UniqueKeys0.KEY_USER_PRIVILEGE_PRIVILEGE_ID_UINDEX;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<DirectoryRecord, Integer> IDENTITY_DIRECTORY = Internal.createIdentity(Directory.DIRECTORY, Directory.DIRECTORY.ID);
        public static Identity<UserRecord, Integer> IDENTITY_USER = Internal.createIdentity(User.USER, User.USER.ID);
        public static Identity<UserPrivilegeRecord, Integer> IDENTITY_USER_PRIVILEGE = Internal.createIdentity(UserPrivilege.USER_PRIVILEGE, UserPrivilege.USER_PRIVILEGE.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_PRIMARY = Internal.createUniqueKey(Directory.DIRECTORY, "KEY_directory_PRIMARY", Directory.DIRECTORY.ID);
        public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_DIRECTORY_ID_UINDEX = Internal.createUniqueKey(Directory.DIRECTORY, "KEY_directory_directory_id_uindex", Directory.DIRECTORY.ID);
        public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_DIRECTORY_RESOURCES_ID_UINDEX = Internal.createUniqueKey(Directory.DIRECTORY, "KEY_directory_directory_resources_id_uindex", Directory.DIRECTORY.RESOURCES_ID);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, "KEY_user_PRIMARY", User.USER.ID);
        public static final UniqueKey<UserRecord> KEY_USER_USER_ID_UINDEX = Internal.createUniqueKey(User.USER, "KEY_user_USER_id_uindex", User.USER.ID);
        public static final UniqueKey<UserRecord> KEY_USER_USER_RESOURCE_ID_UINDEX = Internal.createUniqueKey(User.USER, "KEY_user_user_resource_id_uindex", User.USER.RESOURCE_ID);
        public static final UniqueKey<UserPrivilegeRecord> KEY_USER_PRIVILEGE_PRIMARY = Internal.createUniqueKey(UserPrivilege.USER_PRIVILEGE, "KEY_user_privilege_PRIMARY", UserPrivilege.USER_PRIVILEGE.ID);
        public static final UniqueKey<UserPrivilegeRecord> KEY_USER_PRIVILEGE_PRIVILEGE_ID_UINDEX = Internal.createUniqueKey(UserPrivilege.USER_PRIVILEGE, "KEY_user_privilege_PRIVILEGE_id_uindex", UserPrivilege.USER_PRIVILEGE.ID);
    }
}

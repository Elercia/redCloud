/*
 * This file is generated by jOOQ.
 */
package fr.elercia.redcloud.dao.generated;


import fr.elercia.redcloud.dao.generated.tables.Directory;
import fr.elercia.redcloud.dao.generated.tables.File;
import fr.elercia.redcloud.dao.generated.tables.User;
import fr.elercia.redcloud.dao.generated.tables.records.DirectoryRecord;
import fr.elercia.redcloud.dao.generated.tables.records.FileRecord;
import fr.elercia.redcloud.dao.generated.tables.records.UserRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>redcloud</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<DirectoryRecord, Integer> IDENTITY_DIRECTORY = Identities0.IDENTITY_DIRECTORY;
    public static final Identity<FileRecord, Integer> IDENTITY_FILE = Identities0.IDENTITY_FILE;
    public static final Identity<UserRecord, Integer> IDENTITY_USER = Identities0.IDENTITY_USER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_PRIMARY = UniqueKeys0.KEY_DIRECTORY_PRIMARY;
    public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_DIRECTORY_ID_UINDEX = UniqueKeys0.KEY_DIRECTORY_DIRECTORY_ID_UINDEX;
    public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_DIRECTORY_UNIQUE_NAME_PARENT = UniqueKeys0.KEY_DIRECTORY_DIRECTORY_UNIQUE_NAME_PARENT;
    public static final UniqueKey<FileRecord> KEY_FILE_PRIMARY = UniqueKeys0.KEY_FILE_PRIMARY;
    public static final UniqueKey<FileRecord> KEY_FILE_FILE_ID_UINDEX = UniqueKeys0.KEY_FILE_FILE_ID_UINDEX;
    public static final UniqueKey<FileRecord> KEY_FILE_FILE_UNIQUE_NAME_DIRECTORY = UniqueKeys0.KEY_FILE_FILE_UNIQUE_NAME_DIRECTORY;
    public static final UniqueKey<FileRecord> KEY_FILE_FILE_RESOURCE_ID_UINDEX = UniqueKeys0.KEY_FILE_FILE_RESOURCE_ID_UINDEX;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_USER_ID_UINDEX = UniqueKeys0.KEY_USER_USER_ID_UINDEX;
    public static final UniqueKey<UserRecord> KEY_USER_USER_NAME_UINDEX = UniqueKeys0.KEY_USER_USER_NAME_UINDEX;
    public static final UniqueKey<UserRecord> KEY_USER_USER_RESOURCE_ID_UINDEX = UniqueKeys0.KEY_USER_USER_RESOURCE_ID_UINDEX;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DirectoryRecord, UserRecord> DIRECTORY_USER_USER_ID_FK = ForeignKeys0.DIRECTORY_USER_USER_ID_FK;
    public static final ForeignKey<FileRecord, DirectoryRecord> FILE_DIRECTORY_ID_FK = ForeignKeys0.FILE_DIRECTORY_ID_FK;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<DirectoryRecord, Integer> IDENTITY_DIRECTORY = Internal.createIdentity(Directory.DIRECTORY, Directory.DIRECTORY.ID);
        public static Identity<FileRecord, Integer> IDENTITY_FILE = Internal.createIdentity(File.FILE, File.FILE.ID);
        public static Identity<UserRecord, Integer> IDENTITY_USER = Internal.createIdentity(User.USER, User.USER.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_PRIMARY = Internal.createUniqueKey(Directory.DIRECTORY, "KEY_directory_PRIMARY", Directory.DIRECTORY.ID);
        public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_DIRECTORY_ID_UINDEX = Internal.createUniqueKey(Directory.DIRECTORY, "KEY_directory_directory_id_uindex", Directory.DIRECTORY.ID);
        public static final UniqueKey<DirectoryRecord> KEY_DIRECTORY_DIRECTORY_UNIQUE_NAME_PARENT = Internal.createUniqueKey(Directory.DIRECTORY, "KEY_directory_directory_unique_name_parent", Directory.DIRECTORY.PARENT_ID, Directory.DIRECTORY.NAME);
        public static final UniqueKey<FileRecord> KEY_FILE_PRIMARY = Internal.createUniqueKey(File.FILE, "KEY_file_PRIMARY", File.FILE.ID);
        public static final UniqueKey<FileRecord> KEY_FILE_FILE_ID_UINDEX = Internal.createUniqueKey(File.FILE, "KEY_file_file_id_uindex", File.FILE.ID);
        public static final UniqueKey<FileRecord> KEY_FILE_FILE_UNIQUE_NAME_DIRECTORY = Internal.createUniqueKey(File.FILE, "KEY_file_file_unique_name_directory", File.FILE.DIRECTORY_ID, File.FILE.NAME);
        public static final UniqueKey<FileRecord> KEY_FILE_FILE_RESOURCE_ID_UINDEX = Internal.createUniqueKey(File.FILE, "KEY_file_file_resource_id_uindex", File.FILE.RESOURCE_ID);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, "KEY_user_PRIMARY", User.USER.ID);
        public static final UniqueKey<UserRecord> KEY_USER_USER_ID_UINDEX = Internal.createUniqueKey(User.USER, "KEY_user_user_id_uindex", User.USER.ID);
        public static final UniqueKey<UserRecord> KEY_USER_USER_NAME_UINDEX = Internal.createUniqueKey(User.USER, "KEY_user_user_name_uindex", User.USER.NAME);
        public static final UniqueKey<UserRecord> KEY_USER_USER_RESOURCE_ID_UINDEX = Internal.createUniqueKey(User.USER, "KEY_user_user_resource_id_uindex", User.USER.RESOURCE_ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<DirectoryRecord, UserRecord> DIRECTORY_USER_USER_ID_FK = Internal.createForeignKey(fr.elercia.redcloud.dao.generated.Keys.KEY_USER_PRIMARY, Directory.DIRECTORY, "directory_user_user_id_fk", Directory.DIRECTORY.USER_ID);
        public static final ForeignKey<FileRecord, DirectoryRecord> FILE_DIRECTORY_ID_FK = Internal.createForeignKey(fr.elercia.redcloud.dao.generated.Keys.KEY_DIRECTORY_PRIMARY, File.FILE, "file_directory_id_fk", File.FILE.DIRECTORY_ID);
    }
}

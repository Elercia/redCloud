/*
 * This file is generated by jOOQ.
 */
package redcloud.dao.schema.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import redcloud.dao.schema.Indexes;
import redcloud.dao.schema.Keys;
import redcloud.dao.schema.Redcloud;
import redcloud.dao.schema.tables.records.DirectoryRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Directory extends TableImpl<DirectoryRecord> {

    private static final long serialVersionUID = 35031633;

    /**
     * The reference instance of <code>redcloud.directory</code>
     */
    public static final Directory DIRECTORY = new Directory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DirectoryRecord> getRecordType() {
        return DirectoryRecord.class;
    }

    /**
     * The column <code>redcloud.directory.id</code>.
     */
    public final TableField<DirectoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>redcloud.directory.user_id</code>.
     */
    public final TableField<DirectoryRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>redcloud.directory.name</code>.
     */
    public final TableField<DirectoryRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>redcloud.directory.parent_dir</code>.
     */
    public final TableField<DirectoryRecord, Integer> PARENT_DIR = createField("parent_dir", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>redcloud.directory.resources_id</code>.
     */
    public final TableField<DirectoryRecord, String> RESOURCES_ID = createField("resources_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>redcloud.directory.creation_date</code>.
     */
    public final TableField<DirectoryRecord, Timestamp> CREATION_DATE = createField("creation_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>redcloud.directory</code> table reference
     */
    public Directory() {
        this(DSL.name("directory"), null);
    }

    /**
     * Create an aliased <code>redcloud.directory</code> table reference
     */
    public Directory(String alias) {
        this(DSL.name(alias), DIRECTORY);
    }

    /**
     * Create an aliased <code>redcloud.directory</code> table reference
     */
    public Directory(Name alias) {
        this(alias, DIRECTORY);
    }

    private Directory(Name alias, Table<DirectoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Directory(Name alias, Table<DirectoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Redcloud.REDCLOUD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DIRECTORY_DIRECTORY_DIRECTORY_ID_FK, Indexes.DIRECTORY_DIRECTORY_ID_UINDEX, Indexes.DIRECTORY_DIRECTORY_RESOURCES_ID_UINDEX, Indexes.DIRECTORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DirectoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DIRECTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DirectoryRecord> getPrimaryKey() {
        return Keys.KEY_DIRECTORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DirectoryRecord>> getKeys() {
        return Arrays.<UniqueKey<DirectoryRecord>>asList(Keys.KEY_DIRECTORY_PRIMARY, Keys.KEY_DIRECTORY_DIRECTORY_ID_UINDEX, Keys.KEY_DIRECTORY_DIRECTORY_RESOURCES_ID_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Directory as(String alias) {
        return new Directory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Directory as(Name alias) {
        return new Directory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Directory rename(String name) {
        return new Directory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Directory rename(Name name) {
        return new Directory(name, null);
    }
}
